
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00000612  000006a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000612  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000077  00800114  00800114  000006ba  2**0
                  ALLOC
  3 .stab         000017dc  00000000  00000000  000006bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000122f  00000000  00000000  00001e98  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000030c7  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000030d8  2**2
                  CONTENTS, READONLY
  7 .debug_info   000005f4  00000000  00000000  00003114  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005a2  00000000  00000000  00003708  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  00003caa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  00003cc4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__ctors_end>
   4:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
   8:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
   c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
  10:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
  14:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
  18:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
  1c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
  20:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
  24:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
  28:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
  2c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
  30:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
  34:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
  38:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
  3c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
  40:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
  44:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
  48:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
  4c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
  50:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
  54:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
  58:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
  5c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
  60:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
  64:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	52 20       	and	r5, r2
  6a:	20 20       	and	r2, r0
  6c:	20 20       	and	r2, r0
  6e:	2d 20       	and	r2, r13
  70:	72 65       	ori	r23, 0x52	; 82
  72:	73 65       	ori	r23, 0x53	; 83
  74:	74 20       	and	r7, r4
  76:	74 69       	ori	r23, 0x94	; 148
  78:	6d 65       	ori	r22, 0x5D	; 93
  7a:	72 73       	andi	r23, 0x32	; 50
	...

0000007d <__c.2194>:
  7d:	54 20 6e 20 20 20 2d 20 73 74 61 72 74 20 74 69     T n   - start ti
  8d:	6d 65 72 20 30 20 77 69 74 68 20 77 72 61 70 3d     mer 0 with wrap=
  9d:	6e 00                                               n.

0000009f <__c.2192>:
  9f:	4c 20 64 20 20 20 2d 20 73 65 74 20 4c 45 44 00     L d   - set LED.

000000af <__c.2186>:
  af:	43 6c 6f 63 6b 20 74 65 73 74 20 30 2e 31 00        Clock test 0.1.

000000be <__c.2180>:
  be:	45 72 72 6f 72 00                                   Error.

000000c4 <__ctors_end>:
  c4:	11 24       	eor	r1, r1
  c6:	1f be       	out	0x3f, r1	; 63
  c8:	cf ef       	ldi	r28, 0xFF	; 255
  ca:	d8 e0       	ldi	r29, 0x08	; 8
  cc:	de bf       	out	0x3e, r29	; 62
  ce:	cd bf       	out	0x3d, r28	; 61

000000d0 <__do_copy_data>:
  d0:	11 e0       	ldi	r17, 0x01	; 1
  d2:	a0 e0       	ldi	r26, 0x00	; 0
  d4:	b1 e0       	ldi	r27, 0x01	; 1
  d6:	e2 e1       	ldi	r30, 0x12	; 18
  d8:	f6 e0       	ldi	r31, 0x06	; 6
  da:	02 c0       	rjmp	.+4      	; 0xe0 <__do_copy_data+0x10>
  dc:	05 90       	lpm	r0, Z+
  de:	0d 92       	st	X+, r0
  e0:	a4 31       	cpi	r26, 0x14	; 20
  e2:	b1 07       	cpc	r27, r17
  e4:	d9 f7       	brne	.-10     	; 0xdc <__do_copy_data+0xc>

000000e6 <__do_clear_bss>:
  e6:	21 e0       	ldi	r18, 0x01	; 1
  e8:	a4 e1       	ldi	r26, 0x14	; 20
  ea:	b1 e0       	ldi	r27, 0x01	; 1
  ec:	01 c0       	rjmp	.+2      	; 0xf0 <.do_clear_bss_start>

000000ee <.do_clear_bss_loop>:
  ee:	1d 92       	st	X+, r1

000000f0 <.do_clear_bss_start>:
  f0:	ab 38       	cpi	r26, 0x8B	; 139
  f2:	b2 07       	cpc	r27, r18
  f4:	e1 f7       	brne	.-8      	; 0xee <.do_clear_bss_loop>
  f6:	0e 94 c6 01 	call	0x38c	; 0x38c <main>
  fa:	0c 94 07 03 	jmp	0x60e	; 0x60e <_exit>

000000fe <__bad_interrupt>:
  fe:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000102 <error>:
uint8_t v;
uint16_t adc;
uint32_t iv;

void error() {
  puts_P( PSTR("Error"));
 102:	8e eb       	ldi	r24, 0xBE	; 190
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	0c 94 d6 02 	jmp	0x5ac	; 0x5ac <puts_P>

0000010a <USART0Init>:

// initialize the UART.  Baud rate set in uart.h
void USART0Init(void)
{
  // Set baud rate
  UBRR0H = (uint8_t)(UBRR_VALUE>>8);
 10a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  UBRR0L = (uint8_t)UBRR_VALUE;
 10e:	87 e6       	ldi	r24, 0x67	; 103
 110:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  // Set frame format to 8 data bits, no parity, 1 stop bit
  UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);
 114:	e2 ec       	ldi	r30, 0xC2	; 194
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	86 60       	ori	r24, 0x06	; 6
 11c:	80 83       	st	Z, r24
  //enable transmission and reception
  UCSR0B |= (1<<RXEN0)|(1<<TXEN0);
 11e:	e1 ec       	ldi	r30, 0xC1	; 193
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	88 61       	ori	r24, 0x18	; 24
 126:	80 83       	st	Z, r24
}
 128:	08 95       	ret

0000012a <USART0SendByte>:

// send a byte.  stream is provided for stdio compatibility
// and may be NULL
int USART0SendByte(char u8Data, FILE *stream)
{
 12a:	cf 93       	push	r28
 12c:	c8 2f       	mov	r28, r24
  if(u8Data == '\n')
 12e:	8a 30       	cpi	r24, 0x0A	; 10
 130:	19 f4       	brne	.+6      	; 0x138 <USART0SendByte+0xe>
    {
      USART0SendByte('\r', stream);
 132:	8d e0       	ldi	r24, 0x0D	; 13
 134:	0e 94 95 00 	call	0x12a	; 0x12a <USART0SendByte>
    }
  //wait while previous byte is completed
  while(!(UCSR0A&(1<<UDRE0))){};
 138:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 13c:	85 ff       	sbrs	r24, 5
 13e:	fc cf       	rjmp	.-8      	; 0x138 <USART0SendByte+0xe>
  // Transmit data
  UDR0 = u8Data;
 140:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  return 0;
}
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	cf 91       	pop	r28
 14a:	08 95       	ret

0000014c <USART0CharacterAvailable>:


// return true if a character is available for input
int USART0CharacterAvailable()
{
  return (UCSR0A&(1<<RXC0));
 14c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 150:	80 78       	andi	r24, 0x80	; 128
}
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	08 95       	ret

00000156 <USART0ReceiveByte>:
// convert <CR> to <LF>
int USART0ReceiveByte( FILE *stream)
{
  unsigned char c;
  // Wait for byte to be received
  while(!(UCSR0A&(1<<RXC0))){};
 156:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 15a:	87 ff       	sbrs	r24, 7
 15c:	fc cf       	rjmp	.-8      	; 0x156 <USART0ReceiveByte>
//  // Return received data
  c = UDR0;
 15e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
//  USART0SendByte( c, NULL);
  if(c == '\r') {
 162:	8d 30       	cpi	r24, 0x0D	; 13
 164:	09 f4       	brne	.+2      	; 0x168 <USART0ReceiveByte+0x12>
    c = '\n';
 166:	8a e0       	ldi	r24, 0x0A	; 10
//    USART0SendByte( c, NULL);
  }
  return c;
}
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	08 95       	ret

0000016c <USART0GetString>:



void USART0GetString( char *buffer, int max)
{
 16c:	ef 92       	push	r14
 16e:	ff 92       	push	r15
 170:	1f 93       	push	r17
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
 176:	7c 01       	movw	r14, r24
  int n = 0;
  char *p = buffer;
 178:	ec 01       	movw	r28, r24
  uint8_t c;

  while( 1) {
    c = USART0ReceiveByte( NULL);
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	0e 94 ab 00 	call	0x156	; 0x156 <USART0ReceiveByte>
 182:	18 2f       	mov	r17, r24
 184:	60 91 87 01 	lds	r22, 0x0187	; 0x800187 <__iob+0x2>
 188:	70 91 88 01 	lds	r23, 0x0188	; 0x800188 <__iob+0x3>
    if( c == '\n') {
 18c:	8a 30       	cpi	r24, 0x0A	; 10
 18e:	51 f4       	brne	.+20     	; 0x1a4 <USART0GetString+0x38>
      putchar( c);
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	0e 94 a6 02 	call	0x54c	; 0x54c <fputc>
      *p++ = '\0';
 196:	18 82       	st	Y, r1
      *p++ = c;
    }
    
  }
  
}
 198:	df 91       	pop	r29
 19a:	cf 91       	pop	r28
 19c:	1f 91       	pop	r17
 19e:	ff 90       	pop	r15
 1a0:	ef 90       	pop	r14
 1a2:	08 95       	ret
    if( c == '\n') {
      putchar( c);
      *p++ = '\0';
      return;
    }
    if( c == '\b' && p > buffer) {
 1a4:	88 30       	cpi	r24, 0x08	; 8
 1a6:	49 f4       	brne	.+18     	; 0x1ba <USART0GetString+0x4e>
 1a8:	ec 16       	cp	r14, r28
 1aa:	fd 06       	cpc	r15, r29
 1ac:	30 f4       	brcc	.+12     	; 0x1ba <USART0GetString+0x4e>
      putchar('\b');
 1ae:	88 e0       	ldi	r24, 0x08	; 8
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	0e 94 a6 02 	call	0x54c	; 0x54c <fputc>
      --p;
 1b6:	21 97       	sbiw	r28, 0x01	; 1
 1b8:	e0 cf       	rjmp	.-64     	; 0x17a <USART0GetString+0xe>
    } else {
      putchar( c);
 1ba:	81 2f       	mov	r24, r17
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	0e 94 a6 02 	call	0x54c	; 0x54c <fputc>
      *p++ = c;
 1c2:	18 83       	st	Y, r17
 1c4:	21 96       	adiw	r28, 0x01	; 1
 1c6:	d9 cf       	rjmp	.-78     	; 0x17a <USART0GetString+0xe>

000001c8 <htoi>:
#include <string.h>
#include <ctype.h>

// in AVR-land, strtoul() and sscanf() are big
// convert a hex constant to integer
int htoi( char *s) {
 1c8:	ef 92       	push	r14
 1ca:	ff 92       	push	r15
 1cc:	0f 93       	push	r16
 1ce:	1f 93       	push	r17
 1d0:	cf 93       	push	r28
 1d2:	df 93       	push	r29
 1d4:	7c 01       	movw	r14, r24
  int n = 0;
 1d6:	d0 e0       	ldi	r29, 0x00	; 0
 1d8:	c0 e0       	ldi	r28, 0x00	; 0
  while( *s) {
 1da:	f7 01       	movw	r30, r14
 1dc:	01 91       	ld	r16, Z+
 1de:	7f 01       	movw	r14, r30
 1e0:	01 11       	cpse	r16, r1
 1e2:	08 c0       	rjmp	.+16     	; 0x1f4 <htoi+0x2c>
	n += 10 + (toupper(c) - 'A');
    }
    ++s;
  }
  return n;
}
 1e4:	ce 01       	movw	r24, r28
 1e6:	df 91       	pop	r29
 1e8:	cf 91       	pop	r28
 1ea:	1f 91       	pop	r17
 1ec:	0f 91       	pop	r16
 1ee:	ff 90       	pop	r15
 1f0:	ef 90       	pop	r14
 1f2:	08 95       	ret
// in AVR-land, strtoul() and sscanf() are big
// convert a hex constant to integer
int htoi( char *s) {
  int n = 0;
  while( *s) {
    n *= 16;
 1f4:	84 e0       	ldi	r24, 0x04	; 4
 1f6:	cc 0f       	add	r28, r28
 1f8:	dd 1f       	adc	r29, r29
 1fa:	8a 95       	dec	r24
 1fc:	e1 f7       	brne	.-8      	; 0x1f6 <htoi+0x2e>
    char c = *s;
    if( isxdigit( c)) {
 1fe:	00 2e       	mov	r0, r16
 200:	00 0c       	add	r0, r0
 202:	11 0b       	sbc	r17, r17
 204:	c8 01       	movw	r24, r16
 206:	0e 94 46 02 	call	0x48c	; 0x48c <isxdigit>
 20a:	89 2b       	or	r24, r25
 20c:	31 f3       	breq	.-52     	; 0x1da <htoi+0x12>
      if( isdigit(c))
 20e:	c8 01       	movw	r24, r16
 210:	c0 97       	sbiw	r24, 0x30	; 48
 212:	8a 30       	cpi	r24, 0x0A	; 10
 214:	91 05       	cpc	r25, r1
 216:	18 f4       	brcc	.+6      	; 0x21e <htoi+0x56>
	n += c - '0';
      else
	n += 10 + (toupper(c) - 'A');
 218:	c8 0f       	add	r28, r24
 21a:	d9 1f       	adc	r29, r25
 21c:	de cf       	rjmp	.-68     	; 0x1da <htoi+0x12>
 21e:	c8 01       	movw	r24, r16
 220:	0e 94 52 02 	call	0x4a4	; 0x4a4 <toupper>
 224:	c7 97       	sbiw	r24, 0x37	; 55
 226:	f8 cf       	rjmp	.-16     	; 0x218 <htoi+0x50>

00000228 <my_atoi>:
}

//
// convert a decimal or hex constant to integer
// (low resource version)
int my_atoi( char *s) {
 228:	cf 93       	push	r28
 22a:	df 93       	push	r29
 22c:	ec 01       	movw	r28, r24
  if( strlen(s) > 2 && !strncasecmp( s, "0x", 2))
 22e:	fc 01       	movw	r30, r24
 230:	01 90       	ld	r0, Z+
 232:	00 20       	and	r0, r0
 234:	e9 f7       	brne	.-6      	; 0x230 <my_atoi+0x8>
 236:	31 97       	sbiw	r30, 0x01	; 1
 238:	e8 1b       	sub	r30, r24
 23a:	f9 0b       	sbc	r31, r25
 23c:	33 97       	sbiw	r30, 0x03	; 3
 23e:	70 f0       	brcs	.+28     	; 0x25c <my_atoi+0x34>
 240:	42 e0       	ldi	r20, 0x02	; 2
 242:	50 e0       	ldi	r21, 0x00	; 0
 244:	6e e0       	ldi	r22, 0x0E	; 14
 246:	71 e0       	ldi	r23, 0x01	; 1
 248:	0e 94 5f 02 	call	0x4be	; 0x4be <strncasecmp>
 24c:	89 2b       	or	r24, r25
 24e:	31 f4       	brne	.+12     	; 0x25c <my_atoi+0x34>
    return( htoi( s+2));
 250:	ce 01       	movw	r24, r28
 252:	02 96       	adiw	r24, 0x02	; 2
  else
    return( atoi( s));
}
 254:	df 91       	pop	r29
 256:	cf 91       	pop	r28
//
// convert a decimal or hex constant to integer
// (low resource version)
int my_atoi( char *s) {
  if( strlen(s) > 2 && !strncasecmp( s, "0x", 2))
    return( htoi( s+2));
 258:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <htoi>
  else
    return( atoi( s));
 25c:	ce 01       	movw	r24, r28
}
 25e:	df 91       	pop	r29
 260:	cf 91       	pop	r28
// (low resource version)
int my_atoi( char *s) {
  if( strlen(s) > 2 && !strncasecmp( s, "0x", 2))
    return( htoi( s+2));
  else
    return( atoi( s));
 262:	0c 94 28 02 	jmp	0x450	; 0x450 <atoi>

00000266 <parse>:
}

int parse( char *s, char *argv[], int *iargv, int max) {
 266:	cf 92       	push	r12
 268:	df 92       	push	r13
 26a:	ef 92       	push	r14
 26c:	ff 92       	push	r15
 26e:	0f 93       	push	r16
 270:	1f 93       	push	r17
 272:	cf 93       	push	r28
 274:	df 93       	push	r29
 276:	8b 01       	movw	r16, r22
 278:	7a 01       	movw	r14, r20
 27a:	69 01       	movw	r12, r18
  int n = 0;
  char *p = strtok( s, " ");
 27c:	61 e1       	ldi	r22, 0x11	; 17
 27e:	71 e0       	ldi	r23, 0x01	; 1
 280:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <strtok>
  if( p == NULL)
 284:	00 97       	sbiw	r24, 0x00	; 0
 286:	69 f1       	breq	.+90     	; 0x2e2 <parse+0x7c>
    return 0;
  // handle first token
  argv[n] = p;
 288:	e8 01       	movw	r28, r16
 28a:	89 93       	st	Y+, r24
 28c:	99 93       	st	Y+, r25
  iargv[n] = my_atoi( p);
 28e:	0e 94 14 01 	call	0x228	; 0x228 <my_atoi>
 292:	f7 01       	movw	r30, r14
 294:	81 93       	st	Z+, r24
 296:	91 93       	st	Z+, r25
 298:	8f 01       	movw	r16, r30
  ++n;
 29a:	ee 24       	eor	r14, r14
 29c:	e3 94       	inc	r14
 29e:	f1 2c       	mov	r15, r1
  // handle subsequent tokens
  while( (p = strtok( NULL, " ")) && (n < max) ) {
 2a0:	61 e1       	ldi	r22, 0x11	; 17
 2a2:	71 e0       	ldi	r23, 0x01	; 1
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <strtok>
 2ac:	00 97       	sbiw	r24, 0x00	; 0
 2ae:	19 f0       	breq	.+6      	; 0x2b6 <parse+0x50>
 2b0:	ec 14       	cp	r14, r12
 2b2:	fd 04       	cpc	r15, r13
 2b4:	54 f0       	brlt	.+20     	; 0x2ca <parse+0x64>
    argv[n] = p;
    iargv[n] = my_atoi( p);
    ++n;
  }
  return n;
}
 2b6:	c7 01       	movw	r24, r14
 2b8:	df 91       	pop	r29
 2ba:	cf 91       	pop	r28
 2bc:	1f 91       	pop	r17
 2be:	0f 91       	pop	r16
 2c0:	ff 90       	pop	r15
 2c2:	ef 90       	pop	r14
 2c4:	df 90       	pop	r13
 2c6:	cf 90       	pop	r12
 2c8:	08 95       	ret
  argv[n] = p;
  iargv[n] = my_atoi( p);
  ++n;
  // handle subsequent tokens
  while( (p = strtok( NULL, " ")) && (n < max) ) {
    argv[n] = p;
 2ca:	89 93       	st	Y+, r24
 2cc:	99 93       	st	Y+, r25
    iargv[n] = my_atoi( p);
 2ce:	0e 94 14 01 	call	0x228	; 0x228 <my_atoi>
 2d2:	f8 01       	movw	r30, r16
 2d4:	81 93       	st	Z+, r24
 2d6:	91 93       	st	Z+, r25
 2d8:	8f 01       	movw	r16, r30
    ++n;
 2da:	ff ef       	ldi	r31, 0xFF	; 255
 2dc:	ef 1a       	sub	r14, r31
 2de:	ff 0a       	sbc	r15, r31
 2e0:	df cf       	rjmp	.-66     	; 0x2a0 <parse+0x3a>

int parse( char *s, char *argv[], int *iargv, int max) {
  int n = 0;
  char *p = strtok( s, " ");
  if( p == NULL)
    return 0;
 2e2:	f1 2c       	mov	r15, r1
 2e4:	e1 2c       	mov	r14, r1
 2e6:	e7 cf       	rjmp	.-50     	; 0x2b6 <parse+0x50>

000002e8 <reset_timers>:
//

void reset_timers() {
  uint8_t sr;

  sr = SREG;
 2e8:	9f b7       	in	r25, 0x3f	; 63
  cli();
 2ea:	f8 94       	cli
  GTCCR |= _BV(TSM) | _BV(PSRSYNC) | _BV(PSRASY);	/* clear timer prescalers */
 2ec:	83 b5       	in	r24, 0x23	; 35
 2ee:	83 68       	ori	r24, 0x83	; 131
 2f0:	83 bd       	out	0x23, r24	; 35

  TCNT0 = 0;			/* clear counter 0 */
 2f2:	16 bc       	out	0x26, r1	; 38
  TCNT1 = 1;			/* offset timer 1 by 1 count for phase */
 2f4:	21 e0       	ldi	r18, 0x01	; 1
 2f6:	30 e0       	ldi	r19, 0x00	; 0
 2f8:	30 93 85 00 	sts	0x0085, r19	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 2fc:	20 93 84 00 	sts	0x0084, r18	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>

  // temporarily change OC1 and OC2 to "clear on compare match
  TCCR1A &= ~_BV(COM1A0);
 300:	e0 e8       	ldi	r30, 0x80	; 128
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	80 81       	ld	r24, Z
 306:	8f 7b       	andi	r24, 0xBF	; 191
 308:	80 83       	st	Z, r24
  TCCR1A |= _BV(COM1A1);
 30a:	80 81       	ld	r24, Z
 30c:	80 68       	ori	r24, 0x80	; 128
 30e:	80 83       	st	Z, r24
  TCCR0A &= ~_BV(COM0A0);
 310:	84 b5       	in	r24, 0x24	; 36
 312:	8f 7b       	andi	r24, 0xBF	; 191
 314:	84 bd       	out	0x24, r24	; 36
  TCCR0A |= _BV(COM0A1);
 316:	84 b5       	in	r24, 0x24	; 36
 318:	80 68       	ori	r24, 0x80	; 128
 31a:	84 bd       	out	0x24, r24	; 36

  // force a compare match
  TCCR1C |= _BV(FOC1A) | _BV(FOC1B);
 31c:	a2 e8       	ldi	r26, 0x82	; 130
 31e:	b0 e0       	ldi	r27, 0x00	; 0
 320:	8c 91       	ld	r24, X
 322:	80 6c       	ori	r24, 0xC0	; 192
 324:	8c 93       	st	X, r24
  TCCR0B |= _BV(FOC0A) | _BV(FOC0B);
 326:	85 b5       	in	r24, 0x25	; 37
 328:	80 6c       	ori	r24, 0xC0	; 192
 32a:	85 bd       	out	0x25, r24	; 37

  // reset to normal values
  TCCR1A &= ~_BV(COM1A0);
 32c:	80 81       	ld	r24, Z
 32e:	8f 7b       	andi	r24, 0xBF	; 191
 330:	80 83       	st	Z, r24
  TCCR0A &= ~_BV(COM0A1);
 332:	84 b5       	in	r24, 0x24	; 36
 334:	8f 77       	andi	r24, 0x7F	; 127
 336:	84 bd       	out	0x24, r24	; 36
  TCCR0A |= _BV(COM0A0);      /* toggle OC0A on compare match */      
 338:	84 b5       	in	r24, 0x24	; 36
 33a:	80 64       	ori	r24, 0x40	; 64
 33c:	84 bd       	out	0x24, r24	; 36
  TCCR1A |= _BV(COM1A0);	/* toggle OC1A on compare match */
 33e:	80 81       	ld	r24, Z
 340:	80 64       	ori	r24, 0x40	; 64
 342:	80 83       	st	Z, r24
  
  SREG = sr;
 344:	9f bf       	out	0x3f, r25	; 63
  GTCCR = 0;			/* release timer clear */
 346:	13 bc       	out	0x23, r1	; 35
}
 348:	08 95       	ret

0000034a <init_timers>:
 34a:	9c 01       	movw	r18, r24
 34c:	21 60       	ori	r18, 0x01	; 1
 34e:	56 9a       	sbi	0x0a, 6	; 10
 350:	94 b5       	in	r25, 0x24	; 36
 352:	92 60       	ori	r25, 0x02	; 2
 354:	94 bd       	out	0x24, r25	; 36
 356:	94 b5       	in	r25, 0x24	; 36
 358:	90 64       	ori	r25, 0x40	; 64
 35a:	94 bd       	out	0x24, r25	; 36
 35c:	95 b5       	in	r25, 0x25	; 37
 35e:	91 60       	ori	r25, 0x01	; 1
 360:	95 bd       	out	0x25, r25	; 37
 362:	17 bc       	out	0x27, r1	; 39
 364:	21 9a       	sbi	0x04, 1	; 4
 366:	e1 e8       	ldi	r30, 0x81	; 129
 368:	f0 e0       	ldi	r31, 0x00	; 0
 36a:	90 81       	ld	r25, Z
 36c:	98 60       	ori	r25, 0x08	; 8
 36e:	90 83       	st	Z, r25
 370:	90 81       	ld	r25, Z
 372:	91 60       	ori	r25, 0x01	; 1
 374:	90 83       	st	Z, r25
 376:	e0 e8       	ldi	r30, 0x80	; 128
 378:	f0 e0       	ldi	r31, 0x00	; 0
 37a:	90 81       	ld	r25, Z
 37c:	90 64       	ori	r25, 0x40	; 64
 37e:	90 83       	st	Z, r25
 380:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 384:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 388:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <reset_timers>

0000038c <main>:

int main (void)
{
  unsigned char c = ' ';

  USART0Init();			/* initialize non-interrupt UART */
 38c:	0e 94 85 00 	call	0x10a	; 0x10a <USART0Init>
  stdout = &usart0_str;		/* connect UART to stdout */
 390:	80 e0       	ldi	r24, 0x00	; 0
 392:	91 e0       	ldi	r25, 0x01	; 1
 394:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <__iob+0x3>
 398:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <__iob+0x2>
  stdin = &usart0_str;		/* connect UART to stdin */
 39c:	90 93 86 01 	sts	0x0186, r25	; 0x800186 <__iob+0x1>
 3a0:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <__iob>

  LED_DDR |= _BV(LED_BIT);	/* set LED direction */
 3a4:	25 9a       	sbi	0x04, 5	; 4
  LED_PORT &= ~(_BV(LED_BIT));
 3a6:	2d 98       	cbi	0x05, 5	; 5

  puts_P( PSTR("Clock test 0.1"));
 3a8:	8f ea       	ldi	r24, 0xAF	; 175
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	0e 94 d6 02 	call	0x5ac	; 0x5ac <puts_P>

  while(1) {
    fputs(">", stdout);
 3b0:	60 91 87 01 	lds	r22, 0x0187	; 0x800187 <__iob+0x2>
 3b4:	70 91 88 01 	lds	r23, 0x0188	; 0x800188 <__iob+0x3>
 3b8:	8e e3       	ldi	r24, 0x3E	; 62
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	0e 94 a6 02 	call	0x54c	; 0x54c <fputc>
    USART0GetString( buff, sizeof(buff));
 3c0:	60 e5       	ldi	r22, 0x50	; 80
 3c2:	70 e0       	ldi	r23, 0x00	; 0
 3c4:	8c e2       	ldi	r24, 0x2C	; 44
 3c6:	91 e0       	ldi	r25, 0x01	; 1
 3c8:	0e 94 b6 00 	call	0x16c	; 0x16c <USART0GetString>
    int argc = parse( buff, argv, iargv, sizeof(argv)/sizeof(argv[0]));
 3cc:	26 e0       	ldi	r18, 0x06	; 6
 3ce:	30 e0       	ldi	r19, 0x00	; 0
 3d0:	44 e1       	ldi	r20, 0x14	; 20
 3d2:	51 e0       	ldi	r21, 0x01	; 1
 3d4:	60 e2       	ldi	r22, 0x20	; 32
 3d6:	71 e0       	ldi	r23, 0x01	; 1
 3d8:	8c e2       	ldi	r24, 0x2C	; 44
 3da:	91 e0       	ldi	r25, 0x01	; 1
 3dc:	0e 94 33 01 	call	0x266	; 0x266 <parse>
 3e0:	ec 01       	movw	r28, r24

    char cmd_c = toupper( *argv[0]);
 3e2:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <argv>
 3e6:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <argv+0x1>
 3ea:	80 81       	ld	r24, Z
 3ec:	08 2e       	mov	r0, r24
 3ee:	00 0c       	add	r0, r0
 3f0:	99 0b       	sbc	r25, r25
 3f2:	0e 94 52 02 	call	0x4a4	; 0x4a4 <toupper>
    char cmd_2 = toupper( argv[0][1]);

    switch( cmd_c) {
 3f6:	8c 34       	cpi	r24, 0x4C	; 76
 3f8:	e1 f0       	breq	.+56     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 3fa:	2c f4       	brge	.+10     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 3fc:	88 34       	cpi	r24, 0x48	; 72
 3fe:	71 f0       	breq	.+28     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
    case 'R':
      reset_timers();
      break;

    default:
      error();
 400:	0e 94 81 00 	call	0x102	; 0x102 <error>
 404:	d5 cf       	rjmp	.-86     	; 0x3b0 <main+0x24>
    int argc = parse( buff, argv, iargv, sizeof(argv)/sizeof(argv[0]));

    char cmd_c = toupper( *argv[0]);
    char cmd_2 = toupper( argv[0][1]);

    switch( cmd_c) {
 406:	82 35       	cpi	r24, 0x52	; 82
 408:	01 f1       	breq	.+64     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 40a:	84 35       	cpi	r24, 0x54	; 84
 40c:	c9 f7       	brne	.-14     	; 0x400 <__EEPROM_REGION_LENGTH__>
	  LED_PORT &= ~_BV(LED_BIT);
      }
      break;

    case 'T':
      init_timers( iargv[1]);
 40e:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end+0x2>
 412:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <__data_end+0x3>
 416:	0e 94 a5 01 	call	0x34a	; 0x34a <init_timers>
      break;
 41a:	ca cf       	rjmp	.-108    	; 0x3b0 <main+0x24>
    char cmd_c = toupper( *argv[0]);
    char cmd_2 = toupper( argv[0][1]);

    switch( cmd_c) {
    case 'H':
      puts_P( PSTR("L d   - set LED"));
 41c:	8f e9       	ldi	r24, 0x9F	; 159
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	0e 94 d6 02 	call	0x5ac	; 0x5ac <puts_P>
      puts_P( PSTR("T n   - start timer 0 with wrap=n"));
 424:	8d e7       	ldi	r24, 0x7D	; 125
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	0e 94 d6 02 	call	0x5ac	; 0x5ac <puts_P>
      puts_P( PSTR("R     - reset timers"));
 42c:	88 e6       	ldi	r24, 0x68	; 104
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	bd cf       	rjmp	.-134    	; 0x3ac <main+0x20>
      break;

    case 'L':
      if( argc < 2) {
 432:	22 97       	sbiw	r28, 0x02	; 2
 434:	2c f3       	brlt	.-54     	; 0x400 <__EEPROM_REGION_LENGTH__>
	error();
      } else {
	if( iargv[1])
 436:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end+0x2>
 43a:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <__data_end+0x3>
 43e:	89 2b       	or	r24, r25
 440:	11 f0       	breq	.+4      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
	  LED_PORT |= _BV(LED_BIT);
 442:	2d 9a       	sbi	0x05, 5	; 5
 444:	b5 cf       	rjmp	.-150    	; 0x3b0 <main+0x24>
	else
	  LED_PORT &= ~_BV(LED_BIT);
 446:	2d 98       	cbi	0x05, 5	; 5
 448:	b3 cf       	rjmp	.-154    	; 0x3b0 <main+0x24>
    case 'T':
      init_timers( iargv[1]);
      break;

    case 'R':
      reset_timers();
 44a:	0e 94 74 01 	call	0x2e8	; 0x2e8 <reset_timers>
      break;
 44e:	b0 cf       	rjmp	.-160    	; 0x3b0 <main+0x24>

00000450 <atoi>:
 450:	fc 01       	movw	r30, r24
 452:	88 27       	eor	r24, r24
 454:	99 27       	eor	r25, r25
 456:	e8 94       	clt
 458:	21 91       	ld	r18, Z+
 45a:	20 32       	cpi	r18, 0x20	; 32
 45c:	e9 f3       	breq	.-6      	; 0x458 <atoi+0x8>
 45e:	29 30       	cpi	r18, 0x09	; 9
 460:	10 f0       	brcs	.+4      	; 0x466 <atoi+0x16>
 462:	2e 30       	cpi	r18, 0x0E	; 14
 464:	c8 f3       	brcs	.-14     	; 0x458 <atoi+0x8>
 466:	2b 32       	cpi	r18, 0x2B	; 43
 468:	41 f0       	breq	.+16     	; 0x47a <atoi+0x2a>
 46a:	2d 32       	cpi	r18, 0x2D	; 45
 46c:	39 f4       	brne	.+14     	; 0x47c <atoi+0x2c>
 46e:	68 94       	set
 470:	04 c0       	rjmp	.+8      	; 0x47a <atoi+0x2a>
 472:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulhi_const_10>
 476:	82 0f       	add	r24, r18
 478:	91 1d       	adc	r25, r1
 47a:	21 91       	ld	r18, Z+
 47c:	20 53       	subi	r18, 0x30	; 48
 47e:	2a 30       	cpi	r18, 0x0A	; 10
 480:	c0 f3       	brcs	.-16     	; 0x472 <atoi+0x22>
 482:	1e f4       	brtc	.+6      	; 0x48a <atoi+0x3a>
 484:	90 95       	com	r25
 486:	81 95       	neg	r24
 488:	9f 4f       	sbci	r25, 0xFF	; 255
 48a:	08 95       	ret

0000048c <isxdigit>:
 48c:	91 11       	cpse	r25, r1
 48e:	0c 94 04 03 	jmp	0x608	; 0x608 <__ctype_isfalse>
 492:	80 53       	subi	r24, 0x30	; 48
 494:	8a 50       	subi	r24, 0x0A	; 10
 496:	28 f0       	brcs	.+10     	; 0x4a2 <isxdigit+0x16>
 498:	86 5c       	subi	r24, 0xC6	; 198
 49a:	80 62       	ori	r24, 0x20	; 32
 49c:	81 56       	subi	r24, 0x61	; 97
 49e:	86 50       	subi	r24, 0x06	; 6
 4a0:	b0 f7       	brcc	.-20     	; 0x48e <isxdigit+0x2>
 4a2:	08 95       	ret

000004a4 <toupper>:
 4a4:	91 11       	cpse	r25, r1
 4a6:	08 95       	ret
 4a8:	81 56       	subi	r24, 0x61	; 97
 4aa:	8a 51       	subi	r24, 0x1A	; 26
 4ac:	08 f4       	brcc	.+2      	; 0x4b0 <toupper+0xc>
 4ae:	80 52       	subi	r24, 0x20	; 32
 4b0:	85 58       	subi	r24, 0x85	; 133
 4b2:	08 95       	ret

000004b4 <strtok>:
 4b4:	4c e7       	ldi	r20, 0x7C	; 124
 4b6:	51 e0       	ldi	r21, 0x01	; 1
 4b8:	0e 94 77 02 	call	0x4ee	; 0x4ee <strtok_r>
 4bc:	08 95       	ret

000004be <strncasecmp>:
 4be:	fb 01       	movw	r30, r22
 4c0:	dc 01       	movw	r26, r24
 4c2:	41 50       	subi	r20, 0x01	; 1
 4c4:	50 40       	sbci	r21, 0x00	; 0
 4c6:	88 f0       	brcs	.+34     	; 0x4ea <strncasecmp+0x2c>
 4c8:	8d 91       	ld	r24, X+
 4ca:	81 34       	cpi	r24, 0x41	; 65
 4cc:	1c f0       	brlt	.+6      	; 0x4d4 <strncasecmp+0x16>
 4ce:	8b 35       	cpi	r24, 0x5B	; 91
 4d0:	0c f4       	brge	.+2      	; 0x4d4 <strncasecmp+0x16>
 4d2:	80 5e       	subi	r24, 0xE0	; 224
 4d4:	61 91       	ld	r22, Z+
 4d6:	61 34       	cpi	r22, 0x41	; 65
 4d8:	1c f0       	brlt	.+6      	; 0x4e0 <strncasecmp+0x22>
 4da:	6b 35       	cpi	r22, 0x5B	; 91
 4dc:	0c f4       	brge	.+2      	; 0x4e0 <strncasecmp+0x22>
 4de:	60 5e       	subi	r22, 0xE0	; 224
 4e0:	86 1b       	sub	r24, r22
 4e2:	61 11       	cpse	r22, r1
 4e4:	71 f3       	breq	.-36     	; 0x4c2 <strncasecmp+0x4>
 4e6:	99 0b       	sbc	r25, r25
 4e8:	08 95       	ret
 4ea:	88 1b       	sub	r24, r24
 4ec:	fc cf       	rjmp	.-8      	; 0x4e6 <strncasecmp+0x28>

000004ee <strtok_r>:
 4ee:	fa 01       	movw	r30, r20
 4f0:	a1 91       	ld	r26, Z+
 4f2:	b0 81       	ld	r27, Z
 4f4:	00 97       	sbiw	r24, 0x00	; 0
 4f6:	19 f4       	brne	.+6      	; 0x4fe <strtok_r+0x10>
 4f8:	10 97       	sbiw	r26, 0x00	; 0
 4fa:	e1 f0       	breq	.+56     	; 0x534 <strtok_r+0x46>
 4fc:	cd 01       	movw	r24, r26
 4fe:	dc 01       	movw	r26, r24
 500:	cd 01       	movw	r24, r26
 502:	0d 90       	ld	r0, X+
 504:	00 20       	and	r0, r0
 506:	11 f4       	brne	.+4      	; 0x50c <strtok_r+0x1e>
 508:	c0 01       	movw	r24, r0
 50a:	13 c0       	rjmp	.+38     	; 0x532 <strtok_r+0x44>
 50c:	fb 01       	movw	r30, r22
 50e:	21 91       	ld	r18, Z+
 510:	22 23       	and	r18, r18
 512:	19 f0       	breq	.+6      	; 0x51a <strtok_r+0x2c>
 514:	20 15       	cp	r18, r0
 516:	d9 f7       	brne	.-10     	; 0x50e <strtok_r+0x20>
 518:	f3 cf       	rjmp	.-26     	; 0x500 <strtok_r+0x12>
 51a:	fb 01       	movw	r30, r22
 51c:	21 91       	ld	r18, Z+
 51e:	20 15       	cp	r18, r0
 520:	19 f4       	brne	.+6      	; 0x528 <strtok_r+0x3a>
 522:	1e 92       	st	-X, r1
 524:	11 96       	adiw	r26, 0x01	; 1
 526:	06 c0       	rjmp	.+12     	; 0x534 <strtok_r+0x46>
 528:	22 23       	and	r18, r18
 52a:	c1 f7       	brne	.-16     	; 0x51c <strtok_r+0x2e>
 52c:	0d 90       	ld	r0, X+
 52e:	00 20       	and	r0, r0
 530:	a1 f7       	brne	.-24     	; 0x51a <strtok_r+0x2c>
 532:	d0 01       	movw	r26, r0
 534:	fa 01       	movw	r30, r20
 536:	a1 93       	st	Z+, r26
 538:	b0 83       	st	Z, r27
 53a:	08 95       	ret

0000053c <__mulhi_const_10>:
 53c:	7a e0       	ldi	r23, 0x0A	; 10
 53e:	97 9f       	mul	r25, r23
 540:	90 2d       	mov	r25, r0
 542:	87 9f       	mul	r24, r23
 544:	80 2d       	mov	r24, r0
 546:	91 0d       	add	r25, r1
 548:	11 24       	eor	r1, r1
 54a:	08 95       	ret

0000054c <fputc>:
 54c:	0f 93       	push	r16
 54e:	1f 93       	push	r17
 550:	cf 93       	push	r28
 552:	df 93       	push	r29
 554:	18 2f       	mov	r17, r24
 556:	09 2f       	mov	r16, r25
 558:	eb 01       	movw	r28, r22
 55a:	8b 81       	ldd	r24, Y+3	; 0x03
 55c:	81 fd       	sbrc	r24, 1
 55e:	09 c0       	rjmp	.+18     	; 0x572 <fputc+0x26>
 560:	1f ef       	ldi	r17, 0xFF	; 255
 562:	0f ef       	ldi	r16, 0xFF	; 255
 564:	81 2f       	mov	r24, r17
 566:	90 2f       	mov	r25, r16
 568:	df 91       	pop	r29
 56a:	cf 91       	pop	r28
 56c:	1f 91       	pop	r17
 56e:	0f 91       	pop	r16
 570:	08 95       	ret
 572:	82 ff       	sbrs	r24, 2
 574:	14 c0       	rjmp	.+40     	; 0x59e <fputc+0x52>
 576:	2e 81       	ldd	r18, Y+6	; 0x06
 578:	3f 81       	ldd	r19, Y+7	; 0x07
 57a:	8c 81       	ldd	r24, Y+4	; 0x04
 57c:	9d 81       	ldd	r25, Y+5	; 0x05
 57e:	28 17       	cp	r18, r24
 580:	39 07       	cpc	r19, r25
 582:	3c f4       	brge	.+14     	; 0x592 <fputc+0x46>
 584:	e8 81       	ld	r30, Y
 586:	f9 81       	ldd	r31, Y+1	; 0x01
 588:	cf 01       	movw	r24, r30
 58a:	01 96       	adiw	r24, 0x01	; 1
 58c:	99 83       	std	Y+1, r25	; 0x01
 58e:	88 83       	st	Y, r24
 590:	10 83       	st	Z, r17
 592:	8e 81       	ldd	r24, Y+6	; 0x06
 594:	9f 81       	ldd	r25, Y+7	; 0x07
 596:	01 96       	adiw	r24, 0x01	; 1
 598:	9f 83       	std	Y+7, r25	; 0x07
 59a:	8e 83       	std	Y+6, r24	; 0x06
 59c:	e3 cf       	rjmp	.-58     	; 0x564 <fputc+0x18>
 59e:	e8 85       	ldd	r30, Y+8	; 0x08
 5a0:	f9 85       	ldd	r31, Y+9	; 0x09
 5a2:	81 2f       	mov	r24, r17
 5a4:	09 95       	icall
 5a6:	89 2b       	or	r24, r25
 5a8:	a1 f3       	breq	.-24     	; 0x592 <fputc+0x46>
 5aa:	da cf       	rjmp	.-76     	; 0x560 <fputc+0x14>

000005ac <puts_P>:
 5ac:	0f 93       	push	r16
 5ae:	1f 93       	push	r17
 5b0:	cf 93       	push	r28
 5b2:	df 93       	push	r29
 5b4:	8c 01       	movw	r16, r24
 5b6:	e0 91 87 01 	lds	r30, 0x0187	; 0x800187 <__iob+0x2>
 5ba:	f0 91 88 01 	lds	r31, 0x0188	; 0x800188 <__iob+0x3>
 5be:	83 81       	ldd	r24, Z+3	; 0x03
 5c0:	d0 e0       	ldi	r29, 0x00	; 0
 5c2:	c0 e0       	ldi	r28, 0x00	; 0
 5c4:	81 fd       	sbrc	r24, 1
 5c6:	0a c0       	rjmp	.+20     	; 0x5dc <puts_P+0x30>
 5c8:	cf ef       	ldi	r28, 0xFF	; 255
 5ca:	df ef       	ldi	r29, 0xFF	; 255
 5cc:	17 c0       	rjmp	.+46     	; 0x5fc <puts_P+0x50>
 5ce:	09 95       	icall
 5d0:	89 2b       	or	r24, r25
 5d2:	11 f0       	breq	.+4      	; 0x5d8 <puts_P+0x2c>
 5d4:	cf ef       	ldi	r28, 0xFF	; 255
 5d6:	df ef       	ldi	r29, 0xFF	; 255
 5d8:	0f 5f       	subi	r16, 0xFF	; 255
 5da:	1f 4f       	sbci	r17, 0xFF	; 255
 5dc:	f8 01       	movw	r30, r16
 5de:	84 91       	lpm	r24, Z
 5e0:	60 91 87 01 	lds	r22, 0x0187	; 0x800187 <__iob+0x2>
 5e4:	70 91 88 01 	lds	r23, 0x0188	; 0x800188 <__iob+0x3>
 5e8:	db 01       	movw	r26, r22
 5ea:	18 96       	adiw	r26, 0x08	; 8
 5ec:	ed 91       	ld	r30, X+
 5ee:	fc 91       	ld	r31, X
 5f0:	81 11       	cpse	r24, r1
 5f2:	ed cf       	rjmp	.-38     	; 0x5ce <puts_P+0x22>
 5f4:	8a e0       	ldi	r24, 0x0A	; 10
 5f6:	09 95       	icall
 5f8:	89 2b       	or	r24, r25
 5fa:	31 f7       	brne	.-52     	; 0x5c8 <puts_P+0x1c>
 5fc:	ce 01       	movw	r24, r28
 5fe:	df 91       	pop	r29
 600:	cf 91       	pop	r28
 602:	1f 91       	pop	r17
 604:	0f 91       	pop	r16
 606:	08 95       	ret

00000608 <__ctype_isfalse>:
 608:	99 27       	eor	r25, r25
 60a:	88 27       	eor	r24, r24

0000060c <__ctype_istrue>:
 60c:	08 95       	ret

0000060e <_exit>:
 60e:	f8 94       	cli

00000610 <__stop_program>:
 610:	ff cf       	rjmp	.-2      	; 0x610 <__stop_program>
